{"name":"Simple-php-mvc","tagline":"Simple PHP MVC Library","body":"# Simple PHP-MVC\r\n\r\nPlantilla con el Modelo Vista Controlador\r\n\r\n### Tabla de Contenidos\r\n- [Instalación](#instalacion)\r\n- [Configuración](#configuracion)\r\n- [Rutas, Vistas y Controladores](#rut-vis-cont)\r\n- [Modelos](#modelos)\r\n- [Rutas](#rutas)\r\n    - [GET](#rutas-get)\r\n    - [POST](#rutas-post)\r\n    - [DELETE](#rutas-DELETE)\r\n    - [PUT](#rutas-put)\r\n    - [OPTIONS](#rutas-options)\r\n    - [HEAD](#rutas-head)\r\n    - [AJAX](#rutas-ajax)\r\n    - [Grupos de rutas](#rutas-group)\r\n- [Parámetros de rutas](#rutas-params)\r\n- [Redireccionamiento](#redirect)\r\n- [Proveedores o servicios](#providers)\r\n- [Otros aspectos](#otros)\r\n    - [controller($name = null)](#otros-controllers)\r\n    - [model($name = null)](#otros-models)\r\n    - [view()](#otros-view)\r\n    - [request()](#otros-request)\r\n    - [response()](#otros-response)\r\n- [Pruebas Unitarias](#pruebas)\r\n- [Ejemplo: Hola mundo](#hola-mundo)\r\n- [Ejemplo2: Usando Modelos y Controladores](#ejemplo2)\r\n- [Usando la consola](#usando-consola)\r\n- [Autor](#autor)\r\n\r\n### <a name='instalacion'></a> Instalación\r\n\r\n#### **Instalar composer**\r\n\r\n#### **Git clone** (recomendada)\r\nClonar el repositorio en [github](#\"https://github.com/simple-php-mvc/simple-php-mvc\"). Y luego entrar en la carpeta clonada a través del terminal y luego ejecuta **composer install** para instalar todas las dependencias del projecto en la carpeta `vendor`.\r\n\r\n> **Nota:** esta es la forma recomendada de instalación para obtener la aplicación configurada.\r\n\r\n#### **Composer install**\r\n\r\n-- Crea una carpeta con el nombre de tu proyecto.\r\n-- Entra en la carpeta que creaste y agrega un archivo composer.json con el contenido\r\n\r\n```json\r\n{\r\n   \"require\": {\r\n      \"simple-php-mvc/simple-php-mvc\": '1.6'\r\n   }\r\n}\r\n```\r\n-- Abre una terminal de tu sistema operativo y ejecuta en la carpeta del proyecto **composer install** y espera a que se instale Simple PHP MVC.\r\n\r\n#### **Composer create-project**\r\nOtra forma de instalar con composer es ejecutando el comando **composer install simple-php-mvc/simple-php-mvc** en la terminal de tu sistema operativo.\r\n\r\n### <a name='configuracion'></a> Configuración\r\n> Asegúrate de que la carpeta raíz del sistema tenga los permisos apropiados con `sudo chmod 755 -R`.\r\n\r\n```\r\nproyecto\r\n|_ app/\r\n    |_ config/\r\n       routes.json\r\n       routes.php\r\n    .htaccess\r\n    AppMVC.php\r\n    autoload.php\r\n    console\r\n|_ src/\r\n|_ vendor/\r\n|_ web/\r\n   .htaccess\r\n   app.php\r\n   app_dev.php\r\n```\r\n> **Importante: ** en el archivo **`app/AppMVC.php`** es la configuración de los módulos, proveedores o servicios y las rutas, y puede ser como el siguiente:\r\n\r\n```php\r\n<?php\r\n\r\nuse MVC\\MVC;\r\nuse MVC\\Module\\Module;\r\nuse MVC\\Provider\\Provider;\r\nuse MVC\\Server\\Route;\r\n\r\n/**\r\n * Description of AppMVC\r\n *\r\n * @author Ramón Serrano <ramon.calle.88@gmail.com>\r\n */\r\nclass AppMVC extends MVC\r\n{\r\n    \r\n    /**\r\n     * Set MVC Application Modules\r\n     * \r\n     * @return Module[]\r\n     */\r\n    public function setModules()\r\n    {\r\n        $modules = array(\r\n            new \\MVC\\Tests\\EjemploModule\\EjemploModule(),\r\n        );\r\n        \r\n        return $modules;\r\n    }\r\n    \r\n    /**\r\n     * Set MVC Application Providers\r\n     * \r\n     * @return Provider[]\r\n     */\r\n    public function setProviders()\r\n    {\r\n        $providers = array(\r\n            new \\MVC\\DataBase\\PdoProvider(array(\r\n                'dbname' => 'sf_etituymedio'\r\n            )),\r\n            new \\MVC\\Tests\\Provider\\DoctrineDBALProvider(array(\r\n                'charset'  => null,\r\n                'driver'   => 'pdo_mysql',\r\n                'dbname'   => 'test',\r\n                'host'     => 'localhost',\r\n                'user'     => 'root',\r\n                'password' => null,\r\n                'port'     => null,\r\n            )),\r\n            new \\MVC\\Tests\\Provider\\DoctrineORMProvider(array(\r\n                'params'       => array(\r\n                    'charset'  => null,\r\n                    'driver'   => 'pdo_mysql',\r\n                    'dbname'   => 'test',\r\n                    'host'     => 'localhost',\r\n                    'user'     => 'root',\r\n                    'password' => null,\r\n                    'port'     => null,\r\n                ),\r\n                'dev_mode'     => false,\r\n                'etities_type' => 'annotations',\r\n                'path_entities' => array(\r\n                    $this->getAppDir() . '/../src/MVC/Tests/EjemploModule/Entity'\r\n                ),\r\n                'proxy_dir'    => null\r\n            )),\r\n            new \\MVC\\Tests\\Provider\\MonologProvider(array(\r\n\r\n            )),\r\n            new \\MVC\\Tests\\Provider\\TwigProvider(array(\r\n                'path' => $this->getAppDir() . '/../src/MVC/Tests/EjemploModule/Resources/views'\r\n            )),\r\n        );\r\n        \r\n        $providers[] = new \\MVC\\Tests\\EjemploModule\\EjemploProvider(array(\r\n            \r\n        ));\r\n        \r\n        return $providers;\r\n    }\r\n    \r\n    /**\r\n     * Set MVC Application Routes\r\n     * \r\n     * @return Route[]\r\n     */\r\n    public function setRoutes()\r\n    {\r\n        $routes = parent::setRoutes();\r\n        \r\n        return $routes;\r\n    }\r\n    \r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public function getModules()\r\n    {\r\n        return $this->container->getModules();\r\n    }\r\n}\r\n```\r\n\r\n### <a name='rut-vis-cont'></a> Rutas, Vistas y Controladores\r\n> 1. Rutas\r\n>   - En el archivo **`app/config/routes.php`** o **`app/config/routes.json`** puedes configurar las acciones para las rutas que deseas configurar.\r\n> 2. Vistas\r\n>   - Las vistas debe ser archivos con extensión `.html` o `.php`. \r\n>   - Si usa un controlador para mostrar la vista, los nombres de estos archivos deben ser iguales a la accion del controlador. Ejemplo: **accion/controlador** `index`, **archivo/vista** `index.html`\r\n>   - Los archivos deben ser guardados en la carpeta configurada en **templates_path** de la instancia de **`MVC\\MVC`** con el nombre de la clase del controlador sin la palabra **Controller**. Ejemplo: **carpeta** `clase` donde clase -> ClaseController.\r\n> 3. Controladores\r\n>   - Se recomienda que cada controlador extienda de **`MVC\\Controller\\Controller`**.\r\n>   - El retorno de cada controlador deben ser `cadenas de texto` o variables de tipo `arreglos asociativos` con valores de cualquier tipo.\r\n>   - Para enviar varias variables a una vista, sean de cualquier tipo, el controlador debe retornar las variables dentro de la función `array()`. Ejemplo: **$variable1, $variable2, $variable3** `return array( 'variable1' => $variable1, 'variable2' => $variable2, 'variable3' => $variable3 )`\r\n\r\n## <a name='controladores'></a> Controladores\r\n```php\r\n<?php\r\n\r\nnamespace ControllersNamespace;\r\n\r\nuse MVC\\Controller\\Controller,\r\n    MVC\\MVC,\r\n    MVC\\Server\\HttpRequest;\r\n\r\nclass ClaseController extends Controller\r\n{\r\n   public function indexAction(MVC $mvc, HttpRequest $request)\r\n   {\r\n       return '<p>Resultado de la accion</p>';\r\n   }\r\n}\r\n```\r\n\r\n## <a name='modelos'></a> Modelos\r\nUn modelo se crea de la siguiente forma:\r\n```php\r\n<?php\r\nnamespace ModelsNamespace;\r\n\r\nuse MVC\\DataBase\\Model,\r\n    MVC\\DataBase\\PDO;\r\n\r\nclass Nombre_del_Modelo extends Model\r\n{\r\n    public function __construct(PDO $pdo)\r\n    {\r\n        parent::__construct($pdo, 'nombre_tabla');\r\n    }\r\n}\r\n```\r\n\r\n## <a name='rutas'></a> Rutas\r\nUna ruta se representa como cualquier URI con métodos de consulta que se envía al servidor. \r\n\r\nEn la carpeta `app/config` en el archivo **`routes.json`** o **`routes.php`** se configuran las rutas de la aplicación.\r\n\r\n```json\r\n[{\r\n    \"method\": [\"get\", \"post\", \"ajax\"],\r\n    \"pattern\": \"/index\",\r\n    \"action\": \"ControllerNamespace\\\\ClaseController::indexAction\",\r\n    \"name\": \"foo_index\"\r\n},\r\n{\r\n    \"method\": [\"ajax\", \"delete\", \"get\", \"post\", \"put\", \"head\", \"options\"],\r\n    \"pattern\": \"/index2\",\r\n    \"action\": \"ControllerNamespace\\\\FooController::index2Action\",\r\n    \"name\": \"foo_index2\"\r\n}]\r\n```\r\no\r\n```php\r\n\r\n<?php\r\nreturn array(\r\n    array(\r\n        \"method\"  => [\"ajax\", \"get\", \"post\"],\r\n        \"pattern\" => \"/index\",\r\n        \"action\"  => \"ControllerNamespace\\\\FooController::indexAction\",\r\n        \"name\"    => \"foo_index\"\r\n    ),\r\n    array(\r\n        \"method\"  => [\"ajax\", \"delete\", \"get\", \"post\", \"put\", \"head\", \"options\"],\r\n        \"pattern\" => \"/index2\",\r\n        \"action\"  => \"ControllerNamespace\\\\FooController::index2Action\",\r\n        \"name\"    => \"foo_index2\"\r\n    ),\r\n);\r\n```\r\n\r\n#### <a name='rutas-get'></a> GET\r\nUsa el método **get()** de tu aplicación u objeto **MVC** para crear recursos que devuelvan una llamada a un **URI** mediante el método **HTTP GET**.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->get(\"/hello/[a:name]\", function($name) {\r\n    return \"Hello $name.\";\r\n}, 'hello_get');\r\n```\r\n#### <a name='rutas-post'></a> POST\r\nUsa el método **post()** de tu aplicación u objeto **MVC** para crear recursos que devuelvan una llamada a un **URI** mediante el método **HTTP POST**.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->post(\"/hello/[a:name]\", function($name) {\r\n    return \"Hello $name\";\r\n}, 'hello_post');\r\n```\r\n#### <a name='rutas-delete'></a> DELETE\r\nUsa el método **delete()** de tu aplicación u objeto **MVC** para crear recursos que devuelvan una llamada a un **URI** mediante el método **HTTP DELETE**.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->delete(\"/hello/[i:id]\", function($id) {\r\n    return \"DELETE $id\";\r\n}, 'hello_delete');\r\n```\r\n#### <a name='rutas-put'></a> PUT\r\nUsa el método **put()** de tu aplicación u objeto **MVC** para crear recursos que devuelvan una llamada a un **URI** mediante el método **HTTP PUT**.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->put(\"/hello/[i:id]\", function($id) {\r\n    return \"PUT $id\";\r\n}, 'hello_put');\r\n```\r\n#### <a name='rutas-options'></a> OPTIONS\r\nUsa el método **options()** de tu aplicación u objeto **MVC** para crear recursos que devuelvan una llamada a un **URI** mediante el método **HTTP OPTIONS**.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->options(\"/hello/[i:id]\", function($id) {\r\n    return \"OPTIONS $id\";\r\n}, 'hello_options');\r\n```\r\n#### <a name='rutas-head'></a> HEAD\r\nUsa el método **head()** de tu aplicación u objeto **MVC** para crear recursos que devuelvan una llamada a un **URI** mediante el método **HTTP HEAD**.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->head(\"/hello/[i:id]\", function($id) {\r\n    return \"HEAD $id\";\r\n}, 'hello_head');\r\n```\r\n#### <a name='rutas-ajax'></a> AJAX\r\nUsa el método **ajax()** de tu aplicación u objeto **MVC** para crear recursos que devuelvan una llamada a un **URI** mediante el método **HTTP AJAX**.\r\n```php\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->ajax(\"/hello/[i:id]\", function($id) {\r\n    return \"AJAX $id\";\r\n}, 'hello_ajax');\r\n```\r\n## <a name='rutas-group'></a> Grupos de rutas\r\nUsa el método group de tu aplicación u objeto **MVC** para crear recursos de rutas agrupadas. Esto es para agrupar grupos de rutas que tienen el mismo prefijo.\r\n```php\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->group(\"/admin\", function($route) use($mvc) {\r\n    $mvc->get($route, function() {\r\n        return \"Admin index\";\r\n    }, 'admin_index');\r\n    $mvc->get(\"$route/other\", function() {\r\n        return \"Admin other route.\";\r\n    }, 'admin_other');\r\n});\r\n```\r\n## <a name='rutas-params'></a> Parámetros de rutas\r\nLos tipos de variables válidos para las rutas son:\r\n\r\n - **[i]** Entero\r\n - **[a]** Alfanumerico\r\n - **[h]** Hexadecimal\r\n - **[*]** Cualquier valor\r\n\r\n```php\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->ajax(\"/hello/[i:id]/[a:name]\", function($id, $name) {\r\n    return \"AJAX id = $id, name = $name\\n\";\r\n}, 'hello_id_name');\r\n```\r\n## <a name='redirect'></a> Redireccionamiento\r\nEsta función redirecciona a una ruta...\r\n```php\r\n$mvc = new \\MVC\\MVC();\r\n$mvc->get(\"/\", function() use($mvc){\r\n    $mvc->redirect('/redirect');\r\n}, 'home_redirect');\r\n$mvc->get(\"/redirect\", function(){\r\n    return \"Redirect\\n\";\r\n}, 'redirect');\r\n```\r\n## <a name='providers'></a> Proveedores o servicios\r\nEste aspecto es para registrar otros servicios independientes del Simple PHP MVC extendiendo de **`MVC\\Provider\\Provider`**. Por ejemplo: Doctrine Object Relational Mapper (ORM), SwiftMailer, Monolog, etc. \r\n```php\r\n<?php\r\n\r\nnamespace ProvidersNamespace;\r\n\r\nuse MVC\\MVC,\r\n    MVC\\Provider\\Provider;\r\n\r\nclass ExampleProvider extends Provider\r\n{\r\n    public function __construct(array options = array())\r\n    {\r\n\t    parent::__contruct($options);\r\n    }\r\n    \r\n    public function boot(MVC $mvc)\r\n    {\r\n\t    //Configuraciones\r\n    }\r\n\r\n    public function register(MVC $mvc) \r\n    {\r\n        // Registro de variables de uso o de servicios\r\n        $app->setCvpp('example.name', get_class($this));\r\n        \r\n    }\r\n\r\n}\r\n```\r\n\r\n## <a name='otros'></a> Otros aspectos\r\nPara usar los objetos Response, HttpRequest, View, están las siguientes funciones:\r\n\r\n### <a name='otros-view'></a> view()\r\nDevuelve el objeto de la vistas.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$view = $mvc->view();\r\n```\r\n### <a name='otros-request'></a> request()\r\nDevuelve el objeto **`MVC\\Server\\HttpRequest.`**\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$request = $mvc->request();\r\n```\r\n### <a name='otros-response'></a> response()\r\nDevuelve el objeto \\MVC\\server\\Response.\r\n```\r\n$mvc = new \\MVC\\MVC();\r\n$response = $mvc->response();\r\n```\r\n### <a name='usando-consola'></a> Usando la consola\r\n\r\n> Actualmente en desarrollo. Esperar la version 2.0\r\n\r\n### <a name='autor'></a> **Autor:** \r\nRamón Serrano <ramon.calle.88@gmail.com>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}